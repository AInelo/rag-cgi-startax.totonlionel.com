#!/bin/bash

# Script de d√©marrage pour le service RAG CGI avec Google Gemini
# Auteur: Assistant IA
# Date: $(date)

echo "üöÄ D√©marrage du service RAG CGI avec Google Gemini"
echo "=================================================="

# V√©rifier si Docker est install√©
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker n'est pas install√©. Veuillez l'installer d'abord."
    exit 1
fi

# V√©rifier si Docker Compose est install√©
if ! command -v docker-compose &> /dev/null; then
    echo "‚ùå Docker Compose n'est pas install√©. Veuillez l'installer d'abord."
    exit 1
fi

# V√©rifier si la cl√© API Google est configur√©e
if [ -z "$GOOGLE_API_KEY" ]; then
    echo "‚ö†Ô∏è  Variable GOOGLE_API_KEY non d√©finie."
    echo "üìù Veuillez configurer votre cl√© API Google AI Studio:"
    echo "   1. Allez sur https://aistudio.google.com/app/apikey"
    echo "   2. Cr√©ez une cl√© API gratuite"
    echo "   3. Exportez la variable: export GOOGLE_API_KEY='votre_cl√©'"
    echo ""
    echo "üîë Ou cr√©ez un fichier .env avec: GOOGLE_API_KEY=votre_cl√©"
    echo ""
    
    # Demander la cl√© API
    read -p "Entrez votre cl√© API Google AI Studio: " api_key
    if [ -n "$api_key" ]; then
        export GOOGLE_API_KEY="$api_key"
        echo "‚úÖ Cl√© API configur√©e pour cette session"
    else
        echo "‚ùå Cl√© API requise pour continuer"
        exit 1
    fi
fi

# V√©rifier si le fichier .env existe
if [ ! -f ".env" ]; then
    echo "üìù Cr√©ation du fichier .env..."
    cp config.env.example .env
    echo "‚úÖ Fichier .env cr√©√©. Veuillez y ajouter votre cl√© API Google."
    echo "üîë Remplacez 'your_google_api_key_here' par votre vraie cl√© API"
    exit 1
fi

# V√©rifier si la cl√© API est dans le fichier .env
if grep -q "your_google_api_key_here" .env; then
    echo "‚ö†Ô∏è  Cl√© API non configur√©e dans .env"
    echo "üîë Veuillez remplacer 'your_google_api_key_here' par votre vraie cl√© API"
    exit 1
fi

echo "‚úÖ Configuration v√©rifi√©e"
echo "üîë Cl√© API Google: ${GOOGLE_API_KEY:0:10}..."

# Cr√©er les r√©pertoires n√©cessaires
echo "üìÅ Cr√©ation des r√©pertoires..."
mkdir -p data vector_db static

# V√©rifier s'il y a des documents CGI
if [ ! "$(ls -A data 2>/dev/null)" ]; then
    echo "‚ö†Ô∏è  R√©pertoire 'data' vide. Ajoutez vos documents CGI (.md) avant de continuer."
    echo "üìö Exemple de structure:"
    echo "   data/"
    echo "   ‚îú‚îÄ‚îÄ cgi_documents/"
    echo "   ‚îÇ   ‚îú‚îÄ‚îÄ titre_1.md"
    echo "   ‚îÇ   ‚îú‚îÄ‚îÄ titre_2.md"
    echo "   ‚îÇ   ‚îî‚îÄ‚îÄ ..."
    echo ""
    read -p "Voulez-vous continuer sans documents ? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

# Construire et d√©marrer le service
echo "üî® Construction de l'image Docker..."
docker-compose -f docker-compose.simple.yml build

if [ $? -eq 0 ]; then
    echo "‚úÖ Image construite avec succ√®s"
    
    echo "üöÄ D√©marrage du service..."
    docker-compose -f docker-compose.simple.yml up -d
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ Service d√©marr√© avec succ√®s!"
        echo ""
        echo "üåê Interface web disponible sur: http://localhost:8080"
        echo "üìä Health check: http://localhost:8080/health"
        echo "üìà Statistiques: http://localhost:8080/stats"
        echo ""
        echo "üìã Commandes utiles:"
        echo "   - Voir les logs: docker-compose -f docker-compose.simple.yml logs -f"
        echo "   - Arr√™ter: docker-compose -f docker-compose.simple.yml down"
        echo "   - Red√©marrer: docker-compose -f docker-compose.simple.yml restart"
        echo ""
        echo "üîç V√©rification du statut..."
        sleep 5
        curl -s http://localhost:8080/health | python3 -m json.tool 2>/dev/null || echo "Service en cours de d√©marrage..."
        
    else
        echo "‚ùå Erreur lors du d√©marrage du service"
        exit 1
    fi
else
    echo "‚ùå Erreur lors de la construction de l'image"
    exit 1
fi 