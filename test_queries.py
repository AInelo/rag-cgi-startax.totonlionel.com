#!/usr/bin/env python3
"""
Script de test pour le syst√®me RAG CGI
Teste diff√©rentes requ√™tes sur le Code G√©n√©ral des Imp√¥ts du B√©nin
"""

import requests
import json
import time
from datetime import datetime

# Configuration
BASE_URL = "http://localhost:8080"
HEADERS = {"Content-Type": "application/json"}

def test_health():
    """Test de l'endpoint de sant√©"""
    print("üè• Test de sant√© du service...")
    try:
        response = requests.get(f"{BASE_URL}/health")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Service en bonne sant√©")
            print(f"   - Statut: {data['status']}")
            print(f"   - Documents index√©s: {data['documents_indexed']}")
            print(f"   - Service RAG: {data['rag_service']}")
            return True
        else:
            print(f"‚ùå Erreur de sant√©: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return False

def test_query(question, max_sources=3, context_type="general"):
    """Test d'une requ√™te RAG"""
    print(f"\nüîç Test de requ√™te: {question}")
    print(f"   - Sources max: {max_sources}")
    print(f"   - Contexte: {context_type}")
    
    payload = {
        "question": question,
        "max_sources": max_sources,
        "context_type": context_type
    }
    
    try:
        start_time = time.time()
        response = requests.post(f"{BASE_URL}/query", headers=HEADERS, json=payload)
        processing_time = time.time() - start_time
        
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ R√©ponse re√ßue en {processing_time:.2f}s")
            print(f"   - Succ√®s: {data['success']}")
            print(f"   - Score de confiance: {data['confidence_score']:.1%}")
            print(f"   - Tokens utilis√©s: {data['tokens_used']}")
            print(f"   - Sources trouv√©es: {len(data['sources'])}")
            
            # Afficher la r√©ponse
            print(f"\nüìù R√©ponse:")
            print(f"{data['answer'][:300]}...")
            
            # Afficher les sources
            if data['sources']:
                print(f"\nüìö Sources:")
                for i, source in enumerate(data['sources'][:2], 1):
                    print(f"   {i}. Score: {source['relevance_score']:.2f}")
                    print(f"      Contenu: {source['content'][:100]}...")
            
            return True
        else:
            print(f"‚ùå Erreur de requ√™te: {response.status_code}")
            print(f"   R√©ponse: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return False

def main():
    """Fonction principale de test"""
    print("üöÄ Test du syst√®me RAG CGI - Code G√©n√©ral des Imp√¥ts du B√©nin")
    print("=" * 70)
    print(f"‚è∞ D√©but des tests: {datetime.now().strftime('%H:%M:%S')}")
    
    # Test de sant√©
    if not test_health():
        print("‚ùå Service non disponible, arr√™t des tests")
        return
    
    # Requ√™tes de test
    test_queries = [
        {
            "question": "Quels sont les taux de TVA applicables au B√©nin ?",
            "max_sources": 2,
            "context_type": "fiscal"
        },
        {
            "question": "Quelles sont les obligations fiscales pour une entreprise au B√©nin ?",
            "max_sources": 3,
            "context_type": "entreprise"
        },
        {
            "question": "Comment fonctionne la taxe sur les v√©hicules √† moteur ?",
            "max_sources": 2,
            "context_type": "general"
        },
        {
            "question": "Quels sont les imp√¥ts sur les assurances au B√©nin ?",
            "max_sources": 2,
            "context_type": "fiscal"
        }
    ]
    
    # Ex√©cuter les tests
    success_count = 0
    total_count = len(test_queries)
    
    for i, query_info in enumerate(test_queries, 1):
        print(f"\n{'='*50}")
        print(f"Test {i}/{total_count}")
        print(f"{'='*50}")
        
        if test_query(**query_info):
            success_count += 1
        
        # Pause entre les requ√™tes
        if i < total_count:
            print("\n‚è≥ Pause de 2 secondes...")
            time.sleep(2)
    
    # R√©sum√© des tests
    print(f"\n{'='*70}")
    print(f"üìä R√©sum√© des tests: {success_count}/{total_count} r√©ussis")
    print(f"‚è∞ Fin des tests: {datetime.now().strftime('%H:%M:%S')}")
    
    if success_count == total_count:
        print("üéâ Tous les tests ont r√©ussi !")
    else:
        print(f"‚ö†Ô∏è  {total_count - success_count} test(s) ont √©chou√©")

if __name__ == "__main__":
    main() 