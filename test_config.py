#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test de la configuration des personnalit√©s du chatbot RAG CGI
"""

import sys
import os

# Ajouter le r√©pertoire app au path
sys.path.append(os.path.join(os.path.dirname(__file__), 'app'))

def test_config():
    """Test de la configuration des personnalit√©s"""
    
    print("üß™ Test de la Configuration des Personnalit√©s")
    print("=" * 50)
    
    try:
        from app.config.personnalite_config import PersonnaliteConfig, personnalite_config
        
        # Cr√©er une instance de configuration
        config = PersonnaliteConfig()
        
        print("\n1. Configuration par d√©faut:")
        print("-" * 30)
        
        all_configs = config.get_all_configs()
        for personnalite, params in all_configs.items():
            print(f"   üé≠ {personnalite.upper()}:")
            print(f"      Temp√©rature: {params['temperature']}")
            print(f"      Max tokens: {params['max_tokens']}")
            print(f"      Top_p: {params['top_p']}")
            print(f"      Top_k: {params['top_k']}")
            print(f"      Description: {params['description']}")
            print()
        
        print("\n2. Test des fonctions utilitaires:")
        print("-" * 30)
        
        for personnalite in ["expert", "expert_cgi", "mathematicien"]:
            temp = config.get_temperature(personnalite)
            max_tokens = config.get_max_tokens(personnalite)
            top_p = config.get_top_p(personnalite)
            top_k = config.get_top_k(personnalite)
            
            print(f"   üìä {personnalite}:")
            print(f"      Temp√©rature: {temp}")
            print(f"      Max tokens: {max_tokens}")
            print(f"      Top_p: {top_p}")
            print(f"      Top_k: {top_k}")
        
        print("\n3. Validation de la configuration:")
        print("-" * 30)
        
        is_valid = config.validate_config()
        if is_valid:
            print("   ‚úÖ Configuration valide")
        else:
            print("   ‚ùå Configuration invalide")
        
        print("\n4. Test de mise √† jour:")
        print("-" * 30)
        
        # Mettre √† jour la configuration de l'expert
        config.update_config("expert", temperature=0.05, max_tokens=100)
        
        updated_config = config.get_config("expert")
        print(f"   üîÑ Expert mis √† jour:")
        print(f"      Nouvelle temp√©rature: {updated_config['temperature']}")
        print(f"      Nouveau max_tokens: {updated_config['max_tokens']}")
        
        # Remettre la configuration par d√©faut
        config.update_config("expert", temperature=0.1, max_tokens=150)
        
        print("\n5. Test des variables d'environnement:")
        print("-" * 30)
        
        # Simuler des variables d'environnement
        os.environ["EXPERT_TEMPERATURE"] = "0.05"
        os.environ["MATHEMATICIEN_MAX_TOKENS"] = "1000"
        
        # Cr√©er une nouvelle instance pour charger les variables
        config_env = PersonnaliteConfig()
        
        expert_temp = config_env.get_temperature("expert")
        math_tokens = config_env.get_max_tokens("mathematicien")
        
        print(f"   üåç Variables d'environnement:")
        print(f"      EXPERT_TEMPERATURE=0.05 ‚Üí {expert_temp}")
        print(f"      MATHEMATICIEN_MAX_TOKENS=1000 ‚Üí {math_tokens}")
        
        # Nettoyer les variables d'environnement
        if "EXPERT_TEMPERATURE" in os.environ:
            del os.environ["EXPERT_TEMPERATURE"]
        if "MATHEMATICIEN_MAX_TOKENS" in os.environ:
            del os.environ["MATHEMATICIEN_MAX_TOKENS"]
        
        print("\n‚úÖ Tous les tests de configuration sont pass√©s !")
        
    except ImportError as e:
        print(f"‚ùå Erreur d'import: {e}")
        print("üí° Assurez-vous que le module de configuration est correctement install√©")
    except Exception as e:
        print(f"‚ùå Erreur: {e}")

def test_integration():
    """Test d'int√©gration avec le service de personnalit√©s"""
    
    print("\nüîó Test d'Int√©gration")
    print("=" * 30)
    
    try:
        from app.services.personnalite_service import PersonnaliteService
        from app.config.personnalite_config import get_personnalite_config
        
        # Cr√©er le service de personnalit√©s
        ps = PersonnaliteService()
        
        print("\n1. Test d'int√©gration configuration-personnalit√©s:")
        print("-" * 50)
        
        for personnalite in ["expert", "expert_cgi", "mathematicien"]:
            # R√©cup√©rer la configuration
            config = get_personnalite_config(personnalite)
            
            # R√©cup√©rer le prompt syst√®me
            prompt = ps.get_prompt_system(personnalite)
            
            print(f"   üé≠ {personnalite.upper()}:")
            print(f"      Configuration: T={config['temperature']}, Tokens={config['max_tokens']}")
            print(f"      Prompt: {len(prompt)} caract√®res")
            print(f"      Contient personnalit√©: {'‚úÖ' if personnalite in prompt.lower() else '‚ùå'}")
        
        print("\n‚úÖ Int√©gration r√©ussie !")
        
    except Exception as e:
        print(f"‚ùå Erreur d'int√©gration: {e}")

if __name__ == "__main__":
    print("üöÄ D√©marrage des tests de configuration...")
    
    # Test de la configuration
    test_config()
    
    # Test d'int√©gration
    test_integration()
    
    print("\nüéâ Tests de configuration termin√©s !")
    print("\nüìã R√©sum√©:")
    print("   ‚Ä¢ Configuration des personnalit√©s fonctionnelle")
    print("   ‚Ä¢ Variables d'environnement support√©es")
    print("   ‚Ä¢ Int√©gration avec le service de personnalit√©s")
    print("   ‚Ä¢ Validation automatique des param√®tres")
    
    print("\nüí° Pour personnaliser:")
    print("   ‚Ä¢ Modifiez app/config/personnalite_config.py")
    print("   ‚Ä¢ Utilisez des variables d'environnement")
    print("   ‚Ä¢ Red√©marrez le service apr√®s modification") 