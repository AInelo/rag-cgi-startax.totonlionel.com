#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test des personnalit√©s du chatbot RAG CGI
"""

import asyncio
import sys
import os

# Ajouter le r√©pertoire app au path
sys.path.append(os.path.join(os.path.dirname(__file__), 'app'))

from app.services.personnalite_service import PersonnaliteService
from app.services.llm_service_gemini import GeminiLLMService

async def test_personnalites():
    """Test des diff√©rentes personnalit√©s du chatbot"""
    
    print("üß™ Test des Personnalit√©s du Chatbot RAG CGI")
    print("=" * 50)
    
    # Test du service de personnalit√©s
    print("\n1. Test du service de personnalit√©s...")
    try:
        personnalite_service = PersonnaliteService()
        personnalites = personnalite_service.get_personnalite_info()
        
        for key, info in personnalites.items():
            print(f"   ‚úÖ {key}: {info['nom']} - {info['description']}")
        
        print("\n2. Test des prompts syst√®me...")
        for personnalite in ["expert", "expert_cgi", "mathematicien"]:
            prompt = personnalite_service.get_prompt_system(personnalite)
            print(f"   üìù {personnalite}: {len(prompt)} caract√®res")
            print(f"      D√©but: {prompt[:100]}...")
        
    except Exception as e:
        print(f"   ‚ùå Erreur service personnalit√©s: {e}")
        return
    
    # Test avec le service LLM (si disponible)
    print("\n3. Test avec le service LLM...")
    try:
        api_key = os.getenv('GOOGLE_API_KEY')
        if not api_key:
            print("   ‚ö†Ô∏è  GOOGLE_API_KEY non d√©finie, test LLM ignor√©")
            return
        
        llm_service = GeminiLLMService(api_key=api_key)
        
        # Test de construction de prompt avec personnalit√©
        test_question = "Quel est le taux de TVA au B√©nin ?"
        test_context = [{"content": "La TVA au B√©nin est de 18% selon l'article X du CGI.", "source": "test", "score": 0.9}]
        
        for personnalite in ["expert", "expert_cgi", "mathematicien"]:
            print(f"\n   üß† Test personnalit√©: {personnalite}")
            
            prompt = llm_service._build_cgi_prompt(
                user_query=test_question,
                context_documents=test_context,
                personnalite=personnalite
            )
            
            print(f"      Longueur prompt: {len(prompt)} caract√®res")
            print(f"      Contient personnalit√©: {'‚úÖ' if personnalite in prompt.lower() else '‚ùå'}")
            
            # V√©rifier que le prompt contient les instructions sp√©cifiques
            if personnalite == "expert":
                assert "COURTES" in prompt, "Prompt expert doit contenir 'COURTES'"
            elif personnalite == "expert_cgi":
                assert "D√âTAILL√âES" in prompt, "Prompt expert_cgi doit contenir 'D√âTAILL√âES'"
            elif personnalite == "mathematicien":
                assert "KaTeX" in prompt, "Prompt mathematicien doit contenir 'KaTeX'"
            
            print(f"      ‚úÖ Validation prompt {personnalite}")
        
        print("\n   üéØ Tous les tests de prompts sont pass√©s !")
        
    except Exception as e:
        print(f"   ‚ùå Erreur test LLM: {e}")

def test_exemples_questions():
    """Test avec des exemples de questions typiques"""
    
    print("\n4. Exemples de questions pour chaque personnalit√©...")
    
    exemples = {
        "expert": [
            "Quel est le taux de TVA au B√©nin ?",
            "Qu'est-ce que l'IS ?",
            "Comment d√©clarer mes revenus ?"
        ],
        "expert_cgi": [
            "Expliquez en d√©tail le r√©gime fiscal des entreprises au B√©nin avec r√©f√©rences aux articles du CGI",
            "Quelles sont les conditions d'exon√©ration de l'imp√¥t sur les soci√©t√©s selon le Code G√©n√©ral des Imp√¥ts ?",
            "D√©crivez le processus de d√©claration et de paiement de la TVA pour une entreprise b√©ninoise"
        ],
        "mathematicien": [
            "Donnez la formule de calcul de l'imp√¥t sur les soci√©t√©s avec un exemple num√©rique",
            "Calculez la TVA sur une facture de 500 000 FCFA HT",
            "Quelle est la relation math√©matique pour le calcul de l'imp√¥t sur le revenu des personnes physiques ?"
        ]
    }
    
    for personnalite, questions in exemples.items():
        print(f"\n   üé≠ {personnalite.upper()}:")
        for i, question in enumerate(questions, 1):
            print(f"      {i}. {question}")

if __name__ == "__main__":
    print("üöÄ D√©marrage des tests des personnalit√©s...")
    
    # Test synchrone
    test_exemples_questions()
    
    # Test asynchrone
    asyncio.run(test_personnalites())
    
    print("\nüéâ Tests termin√©s !")
    print("\nüìã R√©sum√© des personnalit√©s disponibles:")
    print("   ‚Ä¢ expert: R√©ponses courtes et directes")
    print("   ‚Ä¢ expert_cgi: R√©ponses d√©taill√©es avec r√©f√©rences CGI")
    print("   ‚Ä¢ mathematicien: Formules math√©matiques en KaTeX")
    
    print("\nüí° Pour tester en ligne:")
    print("   1. D√©marrez le serveur: docker-compose up")
    print("   2. Ouvrez: http://localhost:8080")
    print("   3. S√©lectionnez une personnalit√© et posez une question") 